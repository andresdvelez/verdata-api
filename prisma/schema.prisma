generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Balance {
  id      Int    @id @default(autoincrement())
  amount  Float  @default(0)
  user_id String @unique
  User    User   @relation(fields: [user_id], references: [id])
}

model InternationalEndpoint {
  id         String   @id @default(cuid())
  source     String
  url        String
  created_at DateTime @default(now())
  updated_at DateTime
}

model NationalEndpoint {
  id          String   @id @default(cuid())
  source      String
  url         String
  countryCode String
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model Report {
  id                  String             @id @default(cuid())
  user_id             String
  created_at          DateTime           @default(now())
  nationality         String
  related_identity_id String             @unique
  criminal_records    Boolean
  is_identity_matched Boolean
  news_media          Boolean
  peps_verification   Boolean
  risk_score          Int
  sanctions_lists     Json
  search_data         String
  search_type         String
  SearchedIdentities  SearchedIdentities @relation(fields: [related_identity_id], references: [id])
  User                User               @relation(fields: [user_id], references: [id])
}

model SearchedIdentities {
  id            String   @id @default(cuid())
  document      String?  @unique
  name          String
  nationality   String
  document_type String?
  created_at    DateTime @default(now())
  Report        Report?
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  clerk_id       String   @unique
  balance_id     String?
  referral_code  String   @unique
  referred_by_id String?
  created_at     DateTime
  firstName      String?
  imageUrl       String?
  lastName       String?
  Balance        Balance?
  Report         Report[]
  User           User?    @relation("UserToUser", fields: [referred_by_id], references: [id])
  other_User     User[]   @relation("UserToUser")
}
